generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "postgresqlExtensions", "driverAdapters", "relationJoins"]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  password      String?
  image         String?   @default("/images/avatar.png")
  accounts      Account[]
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  role          Role      @default(PATIENT)

  Doctor Doctor[]

  Post Post[]
}

enum Role {
  PATIENT
  ADMIN
  DOCTOR
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Patient {
  id                   Int                 @id @default(autoincrement())
  firstName            String
  lastName             String
  dateOfBirth          DateTime
  gender               Gender
  phone                String
  email                String?             @unique
  address              String?
  guardianName         String?
  guardianRelationship String?
  bloodGroup           String?
  allergies            String?
  medicalConditions    String?
  insuranceProvider    String?
  insuranceNumber      String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  appointments         Appointment[]
  medicalRecords       MedicalRecord[]
  payments             Payment[]
  growthMeasurements   GrowthMeasurement[]

  MedicalRecords MedicalRecords[]

  Rating Rating[]
}

model Doctor {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  name                String
  specialization      String?
  license_number      String?
  phone               String?
  address             String?
  department          String?
  img                 String?
  colorCode           String?
  availability_status String?
  userId              Int?
  user                User?         @relation(references: [id], fields: [userId], onDelete: Cascade)
  type                JOBTYPE       @default(FULL)
  working_days        WorkingDays[]
  appointments        Appointment[]
  ratings             Rating[]
  diagnosis           Diagnosis[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  MedicalRecord MedicalRecord[]
}

model VitalSigns {
  id               Int           @id @default(autoincrement())
  medicalRecordId  Int           @unique
  medicalRecord    MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  temperature      Float?
  heartRate        Int?
  bloodPressureSys Int?
  bloodPressureDia Int?
  respiratoryRate  Int?
  oxygenSaturation Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  MedicalRecords MedicalRecords[]
}

enum PaymentMethod {
  CASH
  CARD
  INSURANCE
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIAL
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

model Appointment {
  id            Int               @id @default(autoincrement())
  patientId     Int
  patient       Patient           @relation(fields: [patientId], references: [id])
  doctorId      Int
  doctor        Doctor            @relation(fields: [doctorId], references: [id])
  date          DateTime
  status        AppointmentStatus
  type          String
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  medicalRecord MedicalRecord?
  payment       Payment?

  MedicalRecords MedicalRecords[]
}

model LabTest {
  id              Int           @id @default(autoincrement())
  medicalRecordId Int
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  testName        String
  result          String?
  date            DateTime
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  MedicalRecords MedicalRecords[]

  Services Services[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  appointmentId Int           @unique
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  patientId     Int
  patient       Patient       @relation(fields: [patientId], references: [id])
  amount        Float
  method        PaymentMethod
  status        PaymentStatus
  date          DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  PatientBills PatientBills[]
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART
}

model WorkingDays {
  id         Int    @id @default(autoincrement())
  doctor_id  Int
  day        String
  start_time String
  close_time String

  doctor Doctor @relation(fields: [doctor_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PatientBills {
  id           Int      @id @default(autoincrement())
  bill_id      Int
  service_id   Int
  service_date DateTime
  quantity     Int
  unit_cost    Float
  total_cost   Float
  service      Services @relation(fields: [service_id], references: [id])
  payment      Payment  @relation(fields: [bill_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model MedicalRecords {
  id             Int     @id @default(autoincrement())
  patient_id     Int
  appointment_id Int
  doctor_id      Int
  treatment_plan String?
  prescriptions  String?
  lab_request    String?

  appointment Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient     Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  lab_test    LabTest[]
  notes       String?

  vital_signs VitalSigns[]
  diagnosis   Diagnosis[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Diagnosis {
  id                     Int     @id @default(autoincrement())
  patient_id             Int
  medical_id             Int
  doctor_id              Int
  doctor                 Doctor  @relation(fields: [doctor_id], references: [id])
  symptoms               String
  diagnosis              String
  notes                  String?
  prescribed_medications String?
  follow_up_plan         String?

  medical MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AuditLog {
  id        Int     @id @default(autoincrement())
  user_id   Int
  record_id Int
  action    String
  details   String?
  model     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Rating {
  id         Int     @id @default(autoincrement())
  doctor_id  Int
  patient_id Int
  rating     Int
  comment    String?

  doctor  Doctor  @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  patient Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Services {
  id           Int            @id @default(autoincrement())
  service_name String
  description  String
  price        Float
  labtest      LabTest?       @relation(fields: [labtestid], references: [id])
  labtestid    Int?
  bills        PatientBills[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model ClinicExpense {
  id          Int             @id @default(autoincrement())
  category    ExpenseCategory
  amount      Float
  description String?
  expenseDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClinicIncome {
  id          Int      @id @default(autoincrement())
  source      String
  amount      Float
  description String?
  incomeDate  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExpenseCategory {
  SALARY
  RENT
  EQUIPMENT
  SUPPLIES
  UTILITIES
  OTHER
}

model MedicalRecord {
  id            Int         @id @default(autoincrement())
  appointmentId Int         @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  patientId     Int
  patient       Patient     @relation(fields: [patientId], references: [id])
  doctorId      Int
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  diagnosis     String?
  treatment     String?
  prescription  String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  vitalSigns    VitalSigns?
  labTests      LabTest[]
}

model GrowthMeasurement {
  id                Int      @id @default(autoincrement())
  patientId         Int
  patient           Patient  @relation(fields: [patientId], references: [id])
  date              DateTime
  height            Float
  weight            Float
  headCircumference Float?
  bmi               Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
